消息队列优点
    逻辑解耦+物理解耦

消息队列的不足
    增肌系统复杂性
    消息传递时长增加
    消息可靠性与重复性互为矛盾
    上游无法知晓下游的执行结果

【调用方实时依赖执行结果的场景是使用“调用”，而非MQ】

典型依赖场景
    1.数据驱动的任务依赖
    2.上游不关心下游的执行结果
    3.异步执行时间长
        任务A，B，C，要顺序执行
            使用cron人工排时间表，必然需要根据经验预留任务的执行时间，
                以避免造成A未执行完毕，B就开始了的情况；这样造成了时间的浪费
            使用MQ则之需要A完成后发送，Adone消息，B订阅Adone消息，B与C情况同理
                这样A执行完成后B就会第一时间执行，任务之间的依赖只需要订阅相关消息就可以了
--------------------------------------
依赖
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.amqp</groupId>
            <artifactId>spring-rabbit-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    其他依赖（log4j、web、swagger）
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j</artifactId>
            <version>1.3.8.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>
yml配置
    spring:
      rabbitmq:
        host: 192.168.4.18
        port: 5672
        username: guest
        password: guest
配置类
        import org.springframework.amqp.core.*;
        import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
        import org.springframework.amqp.rabbit.connection.ConnectionFactory;
        import org.springframework.amqp.rabbit.core.RabbitTemplate;
        import org.springframework.beans.factory.annotation.Value;
        import org.springframework.beans.factory.config.ConfigurableBeanFactory;
        import org.springframework.context.annotation.Bean;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.context.annotation.Scope;

        @Configuration
        public class RabbitConfig {
            @Value("${spring.rabbitmq.host}")
            private String host;
            @Value("${spring.rabbitmq.port}")
            private int port;
            @Value("${spring.rabbitmq.username}")
            private String username;
            @Value("${spring.rabbitmq.password}")
            private String password;

            public static final String EXCHANGE_A = "my-mq-exchange_A";
            public static final String EXCHANGE_B = "my-mq-exchange_B";
            public static final String EXCHANGE_C = "my-mq-exchange_C";
            public static final String QUEUE_A = "QUEUE_A";
            public static final String QUEUE_B = "QUEUE_B";
            public static final String QUEUE_C = "QUEUE_C";
            public static final String ROUTINGKEY_A = "spring-boot-routingKey_A";
            public static final String ROUTINGKEY_B = "spring-boot-routingKey_B";
            public static final String ROUTINGKEY_C = "spring-boot-routingKey_C";
            public static final String FANOUT_EXCHANGE = "my_fanout_exchange";

            @Bean
            public ConnectionFactory connectionFactory() {
                CachingConnectionFactory connectionFactory = new CachingConnectionFactory(host,port);
                connectionFactory.setUsername(username);
                connectionFactory.setPassword(password);
                connectionFactory.setVirtualHost("/");
                connectionFactory.setPublisherConfirms(true);
                return connectionFactory;
            }

            @Bean
            @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)      //必须是prototype类型
            public RabbitTemplate rabbitTemplate() {
                RabbitTemplate template = new RabbitTemplate(connectionFactory());
                return template;
            }

            @Bean
            public DirectExchange defaultExchange() {return new DirectExchange(EXCHANGE_A); }
            @Bean
            public Queue queueA() { return new Queue(QUEUE_A, true); /*队列持久*/ }
            @Bean
            public Binding bindingA() {
                return BindingBuilder.bind(queueA()).to(defaultExchange()).with(RabbitConfig.ROUTINGKEY_A);
            }
            @Bean
            public Queue queueB() {  return new Queue(QUEUE_B, true); /*队列持久*/ }
            @Bean
            public Binding bindingB(){
                return BindingBuilder.bind(queueB()).to(defaultExchange()).with(RabbitConfig.ROUTINGKEY_B);
            }

            //配置fanout_exchange
            @Bean
            FanoutExchange fanoutExchange() { return new FanoutExchange(RabbitConfig.FANOUT_EXCHANGE);}

            //把所有的队列都绑定到这个交换机上去
            @Bean
            Binding bindingExchangeA(Queue queueA,FanoutExchange fanoutExchange) {
                return BindingBuilder.bind(queueA).to(fanoutExchange);
            }
            @Bean
            Binding bindingExchangeB(Queue queueB, FanoutExchange fanoutExchange) {
                return BindingBuilder.bind(queueB).to(fanoutExchange);
            }
        }
生产者
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.amqp.rabbit.connection.CorrelationData;
        import org.springframework.amqp.rabbit.core.RabbitTemplate;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.stereotype.Component;
        import pers.morris.testrabbitmq.config.RabbitConfig;
        import java.util.UUID;

        @Component
        public class MsgProducer implements RabbitTemplate.ConfirmCallback {
            private final Logger logger = LoggerFactory.getLogger(this.getClass());
            //由于rabbitTemplate的scope属性设置为ConfigurableBeanFactory.SCOPE_PROTOTYPE，所以不能自动注入
            private RabbitTemplate rabbitTemplate;
            /**
             * 构造方法注入rabbitTemplate
             */
            @Autowired
            public MsgProducer(RabbitTemplate rabbitTemplate) {
                this.rabbitTemplate = rabbitTemplate;
                rabbitTemplate.setConfirmCallback(this); //rabbitTemplate如果为单例的话，那回调就是最后设置的内容
            }

            public void sendMsgToQA(String content) {
                CorrelationData correlationId = new CorrelationData(UUID.randomUUID().toString());
                //把消息放入ROUTINGKEY_A对应的队列当中去，对应的是队列A
                rabbitTemplate.convertAndSend(RabbitConfig.EXCHANGE_A, RabbitConfig.ROUTINGKEY_A, content, correlationId);
            }
            public void sendMsgToFanout(String content){
                rabbitTemplate.convertAndSend(RabbitConfig.FANOUT_EXCHANGE,"",content);
            }
            /**
             * 回调
             */
            @Override
            public void confirm(CorrelationData correlationData, boolean ack, String cause) {
                logger.info(" 回调id:" + correlationData);
                if (ack) {
                    logger.info("消息成功消费");
                } else {
                    logger.info("消息消费失败:" + cause);
                }
            }
        }
消费者
        @Component
        @RabbitListener(queues = RabbitConfig.QUEUE_A)   //监听队列queueA
        public class MsgReceiverQueueA1 {
            private final Logger logger = LoggerFactory.getLogger(this.getClass());
            @RabbitHandler
            public void process(String content) { logger.info("QA1 接收处理队列A当中的消息： " + content); }
        }
    监听同一队列的两个消费者会

 
        
